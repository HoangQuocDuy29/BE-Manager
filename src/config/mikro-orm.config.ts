// src/config/mikro-orm.config.ts
import dotenv from 'dotenv';
dotenv.config(); // PH·∫¢I ·ªü d√≤ng ƒë·∫ßu ti√™n, tr∆∞·ªõc m·ªçi process.env

import { Options, MikroORM } from '@mikro-orm/core';
import { PostgreSqlDriver } from '@mikro-orm/postgresql';
import { Task } from '../entities/Task'; // üëà B·∫Øt bu·ªôc ph·∫£i import entity n·∫øu kh√¥ng s·∫Ω l·ªói runtime

console.log({
  driver: PostgreSqlDriver,
  host: process.env.DB_HOST,
  port: Number(process.env.DB_PORT),
  user: process.env.DB_USER,
  password: process.env.DB_PASSWORD,
  dbName: process.env.DB_NAME,
  entities: ['./src/entities'], // ho·∫∑c './src/entities' n·∫øu d√πng ts-node
  debug: true,
});

const config: Options<PostgreSqlDriver> = {
  driver: PostgreSqlDriver,
  host: process.env.DB_HOST,
  port: Number(process.env.DB_PORT),
  user: process.env.DB_USER,
  password: process.env.DB_PASSWORD,
  dbName: process.env.DB_NAME,
  entities: [Task], // ‚ö†Ô∏è D√πng import tr·ª±c ti·∫øp thay v√¨ string ƒë·ªÉ MikroORM kh√¥ng b·ªã l·ªói
  debug: true,
};

export default config;

// ‚úÖ Th√™m export orm ƒë·ªÉ c√°c file kh√°c (routes) d√πng ƒë∆∞·ª£c sau khi ƒë√£ init
export let orm: MikroORM;
export const initORM = async () => {
  orm = await MikroORM.init(config);
};
